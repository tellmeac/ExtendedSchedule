// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"tellmeac/extended-schedule/userconfig"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	entuserconfig "tellmeac/extended-schedule/adapters/ent/userconfig"
)

// UserConfig is the model entity for the UserConfig schema.
type UserConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Email holds the value of the "Email" field.
	Email string `json:"Email,omitempty"`
	// Base holds the value of the "Base" field.
	Base *interface{} `json:"Base,omitempty"`
	// ExtendedGroups holds the value of the "ExtendedGroups" field.
	ExtendedGroups []userconfig.ExtendedGroup `json:"ExtendedGroups,omitempty"`
	// ExcludeRules holds the value of the "ExcludeRules" field.
	ExcludeRules []userconfig.ExcludeRule `json:"ExcludeRules,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserConfig) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case entuserconfig.FieldBase, entuserconfig.FieldExtendedGroups, entuserconfig.FieldExcludeRules:
			values[i] = new([]byte)
		case entuserconfig.FieldEmail:
			values[i] = new(sql.NullString)
		case entuserconfig.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserConfig fields.
func (uc *UserConfig) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entuserconfig.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				uc.ID = *value
			}
		case entuserconfig.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Email", values[i])
			} else if value.Valid {
				uc.Email = value.String
			}
		case entuserconfig.FieldBase:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Base", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &uc.Base); err != nil {
					return fmt.Errorf("unmarshal field Base: %w", err)
				}
			}
		case entuserconfig.FieldExtendedGroups:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ExtendedGroups", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &uc.ExtendedGroups); err != nil {
					return fmt.Errorf("unmarshal field ExtendedGroups: %w", err)
				}
			}
		case entuserconfig.FieldExcludeRules:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ExcludeRules", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &uc.ExcludeRules); err != nil {
					return fmt.Errorf("unmarshal field ExcludeRules: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserConfig.
// Note that you need to call UserConfig.Unwrap() before calling this method if this UserConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (uc *UserConfig) Update() *UserConfigUpdateOne {
	return (&UserConfigClient{config: uc.config}).UpdateOne(uc)
}

// Unwrap unwraps the UserConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uc *UserConfig) Unwrap() *UserConfig {
	_tx, ok := uc.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserConfig is not a transactional entity")
	}
	uc.config.driver = _tx.drv
	return uc
}

// String implements the fmt.Stringer.
func (uc *UserConfig) String() string {
	var builder strings.Builder
	builder.WriteString("UserConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uc.ID))
	builder.WriteString("Email=")
	builder.WriteString(uc.Email)
	builder.WriteString(", ")
	builder.WriteString("Base=")
	builder.WriteString(fmt.Sprintf("%v", uc.Base))
	builder.WriteString(", ")
	builder.WriteString("ExtendedGroups=")
	builder.WriteString(fmt.Sprintf("%v", uc.ExtendedGroups))
	builder.WriteString(", ")
	builder.WriteString("ExcludeRules=")
	builder.WriteString(fmt.Sprintf("%v", uc.ExcludeRules))
	builder.WriteByte(')')
	return builder.String()
}

// UserConfigs is a parsable slice of UserConfig.
type UserConfigs []*UserConfig

func (uc UserConfigs) config(cfg config) {
	for _i := range uc {
		uc[_i].config = cfg
	}
}
