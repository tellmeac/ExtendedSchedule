// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tellmeac/extended-schedule/adapters/ent/predicate"
	"tellmeac/extended-schedule/userconfig"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	entuserconfig "tellmeac/extended-schedule/adapters/ent/userconfig"
)

// UserConfigUpdate is the builder for updating UserConfig entities.
type UserConfigUpdate struct {
	config
	hooks    []Hook
	mutation *UserConfigMutation
}

// Where appends a list predicates to the UserConfigUpdate builder.
func (ucu *UserConfigUpdate) Where(ps ...predicate.UserConfig) *UserConfigUpdate {
	ucu.mutation.Where(ps...)
	return ucu
}

// SetEmail sets the "Email" field.
func (ucu *UserConfigUpdate) SetEmail(s string) *UserConfigUpdate {
	ucu.mutation.SetEmail(s)
	return ucu
}

// SetBase sets the "Base" field.
func (ucu *UserConfigUpdate) SetBase(i *interface{}) *UserConfigUpdate {
	ucu.mutation.SetBase(i)
	return ucu
}

// SetExtendedGroups sets the "ExtendedGroups" field.
func (ucu *UserConfigUpdate) SetExtendedGroups(ug []userconfig.ExtendedGroup) *UserConfigUpdate {
	ucu.mutation.SetExtendedGroups(ug)
	return ucu
}

// SetExcludeRules sets the "ExcludeRules" field.
func (ucu *UserConfigUpdate) SetExcludeRules(ur []userconfig.ExcludeRule) *UserConfigUpdate {
	ucu.mutation.SetExcludeRules(ur)
	return ucu
}

// Mutation returns the UserConfigMutation object of the builder.
func (ucu *UserConfigUpdate) Mutation() *UserConfigMutation {
	return ucu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UserConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ucu.hooks) == 0 {
		if err = ucu.check(); err != nil {
			return 0, err
		}
		affected, err = ucu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ucu.check(); err != nil {
				return 0, err
			}
			ucu.mutation = mutation
			affected, err = ucu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ucu.hooks) - 1; i >= 0; i-- {
			if ucu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ucu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UserConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UserConfigUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UserConfigUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucu *UserConfigUpdate) check() error {
	if v, ok := ucu.mutation.Email(); ok {
		if err := entuserconfig.EmailValidator(v); err != nil {
			return &ValidationError{Name: "Email", err: fmt.Errorf(`ent: validator failed for field "UserConfig.Email": %w`, err)}
		}
	}
	return nil
}

func (ucu *UserConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entuserconfig.Table,
			Columns: entuserconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entuserconfig.FieldID,
			},
		},
	}
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuserconfig.FieldEmail,
		})
	}
	if value, ok := ucu.mutation.Base(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entuserconfig.FieldBase,
		})
	}
	if value, ok := ucu.mutation.ExtendedGroups(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entuserconfig.FieldExtendedGroups,
		})
	}
	if value, ok := ucu.mutation.ExcludeRules(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entuserconfig.FieldExcludeRules,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entuserconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserConfigUpdateOne is the builder for updating a single UserConfig entity.
type UserConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserConfigMutation
}

// SetEmail sets the "Email" field.
func (ucuo *UserConfigUpdateOne) SetEmail(s string) *UserConfigUpdateOne {
	ucuo.mutation.SetEmail(s)
	return ucuo
}

// SetBase sets the "Base" field.
func (ucuo *UserConfigUpdateOne) SetBase(i *interface{}) *UserConfigUpdateOne {
	ucuo.mutation.SetBase(i)
	return ucuo
}

// SetExtendedGroups sets the "ExtendedGroups" field.
func (ucuo *UserConfigUpdateOne) SetExtendedGroups(ug []userconfig.ExtendedGroup) *UserConfigUpdateOne {
	ucuo.mutation.SetExtendedGroups(ug)
	return ucuo
}

// SetExcludeRules sets the "ExcludeRules" field.
func (ucuo *UserConfigUpdateOne) SetExcludeRules(ur []userconfig.ExcludeRule) *UserConfigUpdateOne {
	ucuo.mutation.SetExcludeRules(ur)
	return ucuo
}

// Mutation returns the UserConfigMutation object of the builder.
func (ucuo *UserConfigUpdateOne) Mutation() *UserConfigMutation {
	return ucuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucuo *UserConfigUpdateOne) Select(field string, fields ...string) *UserConfigUpdateOne {
	ucuo.fields = append([]string{field}, fields...)
	return ucuo
}

// Save executes the query and returns the updated UserConfig entity.
func (ucuo *UserConfigUpdateOne) Save(ctx context.Context) (*UserConfig, error) {
	var (
		err  error
		node *UserConfig
	)
	if len(ucuo.hooks) == 0 {
		if err = ucuo.check(); err != nil {
			return nil, err
		}
		node, err = ucuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ucuo.check(); err != nil {
				return nil, err
			}
			ucuo.mutation = mutation
			node, err = ucuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ucuo.hooks) - 1; i >= 0; i-- {
			if ucuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ucuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ucuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserConfig)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserConfigMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UserConfigUpdateOne) SaveX(ctx context.Context) *UserConfig {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UserConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UserConfigUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucuo *UserConfigUpdateOne) check() error {
	if v, ok := ucuo.mutation.Email(); ok {
		if err := entuserconfig.EmailValidator(v); err != nil {
			return &ValidationError{Name: "Email", err: fmt.Errorf(`ent: validator failed for field "UserConfig.Email": %w`, err)}
		}
	}
	return nil
}

func (ucuo *UserConfigUpdateOne) sqlSave(ctx context.Context) (_node *UserConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entuserconfig.Table,
			Columns: entuserconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entuserconfig.FieldID,
			},
		},
	}
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entuserconfig.FieldID)
		for _, f := range fields {
			if !entuserconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entuserconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuserconfig.FieldEmail,
		})
	}
	if value, ok := ucuo.mutation.Base(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entuserconfig.FieldBase,
		})
	}
	if value, ok := ucuo.mutation.ExtendedGroups(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entuserconfig.FieldExtendedGroups,
		})
	}
	if value, ok := ucuo.mutation.ExcludeRules(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entuserconfig.FieldExcludeRules,
		})
	}
	_node = &UserConfig{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entuserconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
