// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tellmeac/extended-schedule/userconfig"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	entuserconfig "tellmeac/extended-schedule/adapters/ent/userconfig"
)

// UserConfigCreate is the builder for creating a UserConfig entity.
type UserConfigCreate struct {
	config
	mutation *UserConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEmail sets the "Email" field.
func (ucc *UserConfigCreate) SetEmail(s string) *UserConfigCreate {
	ucc.mutation.SetEmail(s)
	return ucc
}

// SetBase sets the "Base" field.
func (ucc *UserConfigCreate) SetBase(i *interface{}) *UserConfigCreate {
	ucc.mutation.SetBase(i)
	return ucc
}

// SetExtendedGroups sets the "ExtendedGroups" field.
func (ucc *UserConfigCreate) SetExtendedGroups(ug []userconfig.ExtendedGroup) *UserConfigCreate {
	ucc.mutation.SetExtendedGroups(ug)
	return ucc
}

// SetExcludeRules sets the "ExcludeRules" field.
func (ucc *UserConfigCreate) SetExcludeRules(ur []userconfig.ExcludeRule) *UserConfigCreate {
	ucc.mutation.SetExcludeRules(ur)
	return ucc
}

// SetID sets the "id" field.
func (ucc *UserConfigCreate) SetID(u uuid.UUID) *UserConfigCreate {
	ucc.mutation.SetID(u)
	return ucc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ucc *UserConfigCreate) SetNillableID(u *uuid.UUID) *UserConfigCreate {
	if u != nil {
		ucc.SetID(*u)
	}
	return ucc
}

// Mutation returns the UserConfigMutation object of the builder.
func (ucc *UserConfigCreate) Mutation() *UserConfigMutation {
	return ucc.mutation
}

// Save creates the UserConfig in the database.
func (ucc *UserConfigCreate) Save(ctx context.Context) (*UserConfig, error) {
	var (
		err  error
		node *UserConfig
	)
	ucc.defaults()
	if len(ucc.hooks) == 0 {
		if err = ucc.check(); err != nil {
			return nil, err
		}
		node, err = ucc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ucc.check(); err != nil {
				return nil, err
			}
			ucc.mutation = mutation
			if node, err = ucc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ucc.hooks) - 1; i >= 0; i-- {
			if ucc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ucc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ucc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserConfig)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserConfigMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ucc *UserConfigCreate) SaveX(ctx context.Context) *UserConfig {
	v, err := ucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucc *UserConfigCreate) Exec(ctx context.Context) error {
	_, err := ucc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucc *UserConfigCreate) ExecX(ctx context.Context) {
	if err := ucc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucc *UserConfigCreate) defaults() {
	if _, ok := ucc.mutation.ID(); !ok {
		v := entuserconfig.DefaultID()
		ucc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucc *UserConfigCreate) check() error {
	if _, ok := ucc.mutation.Email(); !ok {
		return &ValidationError{Name: "Email", err: errors.New(`ent: missing required field "UserConfig.Email"`)}
	}
	if v, ok := ucc.mutation.Email(); ok {
		if err := entuserconfig.EmailValidator(v); err != nil {
			return &ValidationError{Name: "Email", err: fmt.Errorf(`ent: validator failed for field "UserConfig.Email": %w`, err)}
		}
	}
	if _, ok := ucc.mutation.Base(); !ok {
		return &ValidationError{Name: "Base", err: errors.New(`ent: missing required field "UserConfig.Base"`)}
	}
	if _, ok := ucc.mutation.ExtendedGroups(); !ok {
		return &ValidationError{Name: "ExtendedGroups", err: errors.New(`ent: missing required field "UserConfig.ExtendedGroups"`)}
	}
	if _, ok := ucc.mutation.ExcludeRules(); !ok {
		return &ValidationError{Name: "ExcludeRules", err: errors.New(`ent: missing required field "UserConfig.ExcludeRules"`)}
	}
	return nil
}

func (ucc *UserConfigCreate) sqlSave(ctx context.Context) (*UserConfig, error) {
	_node, _spec := ucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ucc *UserConfigCreate) createSpec() (*UserConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &UserConfig{config: ucc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: entuserconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entuserconfig.FieldID,
			},
		}
	)
	_spec.OnConflict = ucc.conflict
	if id, ok := ucc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ucc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuserconfig.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := ucc.mutation.Base(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entuserconfig.FieldBase,
		})
		_node.Base = value
	}
	if value, ok := ucc.mutation.ExtendedGroups(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entuserconfig.FieldExtendedGroups,
		})
		_node.ExtendedGroups = value
	}
	if value, ok := ucc.mutation.ExcludeRules(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entuserconfig.FieldExcludeRules,
		})
		_node.ExcludeRules = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserConfig.Create().
//		SetEmail(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserConfigUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (ucc *UserConfigCreate) OnConflict(opts ...sql.ConflictOption) *UserConfigUpsertOne {
	ucc.conflict = opts
	return &UserConfigUpsertOne{
		create: ucc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucc *UserConfigCreate) OnConflictColumns(columns ...string) *UserConfigUpsertOne {
	ucc.conflict = append(ucc.conflict, sql.ConflictColumns(columns...))
	return &UserConfigUpsertOne{
		create: ucc,
	}
}

type (
	// UserConfigUpsertOne is the builder for "upsert"-ing
	//  one UserConfig node.
	UserConfigUpsertOne struct {
		create *UserConfigCreate
	}

	// UserConfigUpsert is the "OnConflict" setter.
	UserConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetEmail sets the "Email" field.
func (u *UserConfigUpsert) SetEmail(v string) *UserConfigUpsert {
	u.Set(entuserconfig.FieldEmail, v)
	return u
}

// UpdateEmail sets the "Email" field to the value that was provided on create.
func (u *UserConfigUpsert) UpdateEmail() *UserConfigUpsert {
	u.SetExcluded(entuserconfig.FieldEmail)
	return u
}

// SetBase sets the "Base" field.
func (u *UserConfigUpsert) SetBase(v *interface{}) *UserConfigUpsert {
	u.Set(entuserconfig.FieldBase, v)
	return u
}

// UpdateBase sets the "Base" field to the value that was provided on create.
func (u *UserConfigUpsert) UpdateBase() *UserConfigUpsert {
	u.SetExcluded(entuserconfig.FieldBase)
	return u
}

// SetExtendedGroups sets the "ExtendedGroups" field.
func (u *UserConfigUpsert) SetExtendedGroups(v []userconfig.ExtendedGroup) *UserConfigUpsert {
	u.Set(entuserconfig.FieldExtendedGroups, v)
	return u
}

// UpdateExtendedGroups sets the "ExtendedGroups" field to the value that was provided on create.
func (u *UserConfigUpsert) UpdateExtendedGroups() *UserConfigUpsert {
	u.SetExcluded(entuserconfig.FieldExtendedGroups)
	return u
}

// SetExcludeRules sets the "ExcludeRules" field.
func (u *UserConfigUpsert) SetExcludeRules(v []userconfig.ExcludeRule) *UserConfigUpsert {
	u.Set(entuserconfig.FieldExcludeRules, v)
	return u
}

// UpdateExcludeRules sets the "ExcludeRules" field to the value that was provided on create.
func (u *UserConfigUpsert) UpdateExcludeRules() *UserConfigUpsert {
	u.SetExcluded(entuserconfig.FieldExcludeRules)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(entuserconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserConfigUpsertOne) UpdateNewValues() *UserConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(entuserconfig.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserConfigUpsertOne) Ignore() *UserConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserConfigUpsertOne) DoNothing() *UserConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserConfigCreate.OnConflict
// documentation for more info.
func (u *UserConfigUpsertOne) Update(set func(*UserConfigUpsert)) *UserConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "Email" field.
func (u *UserConfigUpsertOne) SetEmail(v string) *UserConfigUpsertOne {
	return u.Update(func(s *UserConfigUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "Email" field to the value that was provided on create.
func (u *UserConfigUpsertOne) UpdateEmail() *UserConfigUpsertOne {
	return u.Update(func(s *UserConfigUpsert) {
		s.UpdateEmail()
	})
}

// SetBase sets the "Base" field.
func (u *UserConfigUpsertOne) SetBase(v *interface{}) *UserConfigUpsertOne {
	return u.Update(func(s *UserConfigUpsert) {
		s.SetBase(v)
	})
}

// UpdateBase sets the "Base" field to the value that was provided on create.
func (u *UserConfigUpsertOne) UpdateBase() *UserConfigUpsertOne {
	return u.Update(func(s *UserConfigUpsert) {
		s.UpdateBase()
	})
}

// SetExtendedGroups sets the "ExtendedGroups" field.
func (u *UserConfigUpsertOne) SetExtendedGroups(v []userconfig.ExtendedGroup) *UserConfigUpsertOne {
	return u.Update(func(s *UserConfigUpsert) {
		s.SetExtendedGroups(v)
	})
}

// UpdateExtendedGroups sets the "ExtendedGroups" field to the value that was provided on create.
func (u *UserConfigUpsertOne) UpdateExtendedGroups() *UserConfigUpsertOne {
	return u.Update(func(s *UserConfigUpsert) {
		s.UpdateExtendedGroups()
	})
}

// SetExcludeRules sets the "ExcludeRules" field.
func (u *UserConfigUpsertOne) SetExcludeRules(v []userconfig.ExcludeRule) *UserConfigUpsertOne {
	return u.Update(func(s *UserConfigUpsert) {
		s.SetExcludeRules(v)
	})
}

// UpdateExcludeRules sets the "ExcludeRules" field to the value that was provided on create.
func (u *UserConfigUpsertOne) UpdateExcludeRules() *UserConfigUpsertOne {
	return u.Update(func(s *UserConfigUpsert) {
		s.UpdateExcludeRules()
	})
}

// Exec executes the query.
func (u *UserConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserConfigUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserConfigUpsertOne.ID is not supported by MySQL driver. Use UserConfigUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserConfigUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserConfigCreateBulk is the builder for creating many UserConfig entities in bulk.
type UserConfigCreateBulk struct {
	config
	builders []*UserConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the UserConfig entities in the database.
func (uccb *UserConfigCreateBulk) Save(ctx context.Context) ([]*UserConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uccb.builders))
	nodes := make([]*UserConfig, len(uccb.builders))
	mutators := make([]Mutator, len(uccb.builders))
	for i := range uccb.builders {
		func(i int, root context.Context) {
			builder := uccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uccb *UserConfigCreateBulk) SaveX(ctx context.Context) []*UserConfig {
	v, err := uccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uccb *UserConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := uccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uccb *UserConfigCreateBulk) ExecX(ctx context.Context) {
	if err := uccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserConfigUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (uccb *UserConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserConfigUpsertBulk {
	uccb.conflict = opts
	return &UserConfigUpsertBulk{
		create: uccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uccb *UserConfigCreateBulk) OnConflictColumns(columns ...string) *UserConfigUpsertBulk {
	uccb.conflict = append(uccb.conflict, sql.ConflictColumns(columns...))
	return &UserConfigUpsertBulk{
		create: uccb,
	}
}

// UserConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of UserConfig nodes.
type UserConfigUpsertBulk struct {
	create *UserConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(entuserconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserConfigUpsertBulk) UpdateNewValues() *UserConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(entuserconfig.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserConfigUpsertBulk) Ignore() *UserConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserConfigUpsertBulk) DoNothing() *UserConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserConfigCreateBulk.OnConflict
// documentation for more info.
func (u *UserConfigUpsertBulk) Update(set func(*UserConfigUpsert)) *UserConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "Email" field.
func (u *UserConfigUpsertBulk) SetEmail(v string) *UserConfigUpsertBulk {
	return u.Update(func(s *UserConfigUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "Email" field to the value that was provided on create.
func (u *UserConfigUpsertBulk) UpdateEmail() *UserConfigUpsertBulk {
	return u.Update(func(s *UserConfigUpsert) {
		s.UpdateEmail()
	})
}

// SetBase sets the "Base" field.
func (u *UserConfigUpsertBulk) SetBase(v *interface{}) *UserConfigUpsertBulk {
	return u.Update(func(s *UserConfigUpsert) {
		s.SetBase(v)
	})
}

// UpdateBase sets the "Base" field to the value that was provided on create.
func (u *UserConfigUpsertBulk) UpdateBase() *UserConfigUpsertBulk {
	return u.Update(func(s *UserConfigUpsert) {
		s.UpdateBase()
	})
}

// SetExtendedGroups sets the "ExtendedGroups" field.
func (u *UserConfigUpsertBulk) SetExtendedGroups(v []userconfig.ExtendedGroup) *UserConfigUpsertBulk {
	return u.Update(func(s *UserConfigUpsert) {
		s.SetExtendedGroups(v)
	})
}

// UpdateExtendedGroups sets the "ExtendedGroups" field to the value that was provided on create.
func (u *UserConfigUpsertBulk) UpdateExtendedGroups() *UserConfigUpsertBulk {
	return u.Update(func(s *UserConfigUpsert) {
		s.UpdateExtendedGroups()
	})
}

// SetExcludeRules sets the "ExcludeRules" field.
func (u *UserConfigUpsertBulk) SetExcludeRules(v []userconfig.ExcludeRule) *UserConfigUpsertBulk {
	return u.Update(func(s *UserConfigUpsert) {
		s.SetExcludeRules(v)
	})
}

// UpdateExcludeRules sets the "ExcludeRules" field to the value that was provided on create.
func (u *UserConfigUpsertBulk) UpdateExcludeRules() *UserConfigUpsertBulk {
	return u.Update(func(s *UserConfigUpsert) {
		s.UpdateExcludeRules()
	})
}

// Exec executes the query.
func (u *UserConfigUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
