// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tellmeac/extended-schedule/adapters/ent/predicate"
	"tellmeac/extended-schedule/adapters/ent/studygroup"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StudyGroupUpdate is the builder for updating StudyGroup entities.
type StudyGroupUpdate struct {
	config
	hooks    []Hook
	mutation *StudyGroupMutation
}

// Where appends a list predicates to the StudyGroupUpdate builder.
func (sgu *StudyGroupUpdate) Where(ps ...predicate.StudyGroup) *StudyGroupUpdate {
	sgu.mutation.Where(ps...)
	return sgu
}

// SetName sets the "name" field.
func (sgu *StudyGroupUpdate) SetName(s string) *StudyGroupUpdate {
	sgu.mutation.SetName(s)
	return sgu
}

// SetFacultyName sets the "facultyName" field.
func (sgu *StudyGroupUpdate) SetFacultyName(s string) *StudyGroupUpdate {
	sgu.mutation.SetFacultyName(s)
	return sgu
}

// Mutation returns the StudyGroupMutation object of the builder.
func (sgu *StudyGroupUpdate) Mutation() *StudyGroupMutation {
	return sgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgu *StudyGroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sgu.hooks) == 0 {
		affected, err = sgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudyGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sgu.mutation = mutation
			affected, err = sgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sgu.hooks) - 1; i >= 0; i-- {
			if sgu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgu *StudyGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := sgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgu *StudyGroupUpdate) Exec(ctx context.Context) error {
	_, err := sgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgu *StudyGroupUpdate) ExecX(ctx context.Context) {
	if err := sgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sgu *StudyGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   studygroup.Table,
			Columns: studygroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: studygroup.FieldID,
			},
		},
	}
	if ps := sgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studygroup.FieldName,
		})
	}
	if value, ok := sgu.mutation.FacultyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studygroup.FieldFacultyName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studygroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// StudyGroupUpdateOne is the builder for updating a single StudyGroup entity.
type StudyGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudyGroupMutation
}

// SetName sets the "name" field.
func (sguo *StudyGroupUpdateOne) SetName(s string) *StudyGroupUpdateOne {
	sguo.mutation.SetName(s)
	return sguo
}

// SetFacultyName sets the "facultyName" field.
func (sguo *StudyGroupUpdateOne) SetFacultyName(s string) *StudyGroupUpdateOne {
	sguo.mutation.SetFacultyName(s)
	return sguo
}

// Mutation returns the StudyGroupMutation object of the builder.
func (sguo *StudyGroupUpdateOne) Mutation() *StudyGroupMutation {
	return sguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sguo *StudyGroupUpdateOne) Select(field string, fields ...string) *StudyGroupUpdateOne {
	sguo.fields = append([]string{field}, fields...)
	return sguo
}

// Save executes the query and returns the updated StudyGroup entity.
func (sguo *StudyGroupUpdateOne) Save(ctx context.Context) (*StudyGroup, error) {
	var (
		err  error
		node *StudyGroup
	)
	if len(sguo.hooks) == 0 {
		node, err = sguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudyGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sguo.mutation = mutation
			node, err = sguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sguo.hooks) - 1; i >= 0; i-- {
			if sguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sguo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sguo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*StudyGroup)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StudyGroupMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sguo *StudyGroupUpdateOne) SaveX(ctx context.Context) *StudyGroup {
	node, err := sguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sguo *StudyGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := sguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sguo *StudyGroupUpdateOne) ExecX(ctx context.Context) {
	if err := sguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sguo *StudyGroupUpdateOne) sqlSave(ctx context.Context) (_node *StudyGroup, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   studygroup.Table,
			Columns: studygroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: studygroup.FieldID,
			},
		},
	}
	id, ok := sguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StudyGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, studygroup.FieldID)
		for _, f := range fields {
			if !studygroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != studygroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sguo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studygroup.FieldName,
		})
	}
	if value, ok := sguo.mutation.FacultyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studygroup.FieldFacultyName,
		})
	}
	_node = &StudyGroup{config: sguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studygroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
