// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"tellmeac/extended-schedule/adapters/ent/studygroup"

	"entgo.io/ent/dialect/sql"
)

// StudyGroup is the model entity for the StudyGroup schema.
type StudyGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// FacultyName holds the value of the "facultyName" field.
	FacultyName string `json:"facultyName,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StudyGroup) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case studygroup.FieldID, studygroup.FieldName, studygroup.FieldFacultyName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type StudyGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StudyGroup fields.
func (sg *StudyGroup) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case studygroup.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sg.ID = value.String
			}
		case studygroup.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sg.Name = value.String
			}
		case studygroup.FieldFacultyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field facultyName", values[i])
			} else if value.Valid {
				sg.FacultyName = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this StudyGroup.
// Note that you need to call StudyGroup.Unwrap() before calling this method if this StudyGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (sg *StudyGroup) Update() *StudyGroupUpdateOne {
	return (&StudyGroupClient{config: sg.config}).UpdateOne(sg)
}

// Unwrap unwraps the StudyGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sg *StudyGroup) Unwrap() *StudyGroup {
	_tx, ok := sg.config.driver.(*txDriver)
	if !ok {
		panic("ent: StudyGroup is not a transactional entity")
	}
	sg.config.driver = _tx.drv
	return sg
}

// String implements the fmt.Stringer.
func (sg *StudyGroup) String() string {
	var builder strings.Builder
	builder.WriteString("StudyGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sg.ID))
	builder.WriteString("name=")
	builder.WriteString(sg.Name)
	builder.WriteString(", ")
	builder.WriteString("facultyName=")
	builder.WriteString(sg.FacultyName)
	builder.WriteByte(')')
	return builder.String()
}

// StudyGroups is a parsable slice of StudyGroup.
type StudyGroups []*StudyGroup

func (sg StudyGroups) config(cfg config) {
	for _i := range sg {
		sg[_i].config = cfg
	}
}
