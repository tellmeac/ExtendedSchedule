// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"tellmeac/extended-schedule/adapters/ent/predicate"
	"tellmeac/extended-schedule/adapters/ent/studygroup"
	"tellmeac/extended-schedule/adapters/ent/teacher"
	entuserconfig "tellmeac/extended-schedule/adapters/ent/userconfig"
	"tellmeac/extended-schedule/userconfig"

	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeStudyGroup = "StudyGroup"
	TypeTeacher    = "Teacher"
	TypeUserConfig = "UserConfig"
)

// StudyGroupMutation represents an operation that mutates the StudyGroup nodes in the graph.
type StudyGroupMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	facultyName   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*StudyGroup, error)
	predicates    []predicate.StudyGroup
}

var _ ent.Mutation = (*StudyGroupMutation)(nil)

// studygroupOption allows management of the mutation configuration using functional options.
type studygroupOption func(*StudyGroupMutation)

// newStudyGroupMutation creates new mutation for the StudyGroup entity.
func newStudyGroupMutation(c config, op Op, opts ...studygroupOption) *StudyGroupMutation {
	m := &StudyGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeStudyGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudyGroupID sets the ID field of the mutation.
func withStudyGroupID(id string) studygroupOption {
	return func(m *StudyGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *StudyGroup
		)
		m.oldValue = func(ctx context.Context) (*StudyGroup, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StudyGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudyGroup sets the old StudyGroup of the mutation.
func withStudyGroup(node *StudyGroup) studygroupOption {
	return func(m *StudyGroupMutation) {
		m.oldValue = func(context.Context) (*StudyGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudyGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudyGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StudyGroup entities.
func (m *StudyGroupMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StudyGroupMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StudyGroupMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StudyGroup.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *StudyGroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StudyGroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the StudyGroup entity.
// If the StudyGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudyGroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StudyGroupMutation) ResetName() {
	m.name = nil
}

// SetFacultyName sets the "facultyName" field.
func (m *StudyGroupMutation) SetFacultyName(s string) {
	m.facultyName = &s
}

// FacultyName returns the value of the "facultyName" field in the mutation.
func (m *StudyGroupMutation) FacultyName() (r string, exists bool) {
	v := m.facultyName
	if v == nil {
		return
	}
	return *v, true
}

// OldFacultyName returns the old "facultyName" field's value of the StudyGroup entity.
// If the StudyGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudyGroupMutation) OldFacultyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFacultyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFacultyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFacultyName: %w", err)
	}
	return oldValue.FacultyName, nil
}

// ResetFacultyName resets all changes to the "facultyName" field.
func (m *StudyGroupMutation) ResetFacultyName() {
	m.facultyName = nil
}

// Where appends a list predicates to the StudyGroupMutation builder.
func (m *StudyGroupMutation) Where(ps ...predicate.StudyGroup) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StudyGroupMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (StudyGroup).
func (m *StudyGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StudyGroupMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, studygroup.FieldName)
	}
	if m.facultyName != nil {
		fields = append(fields, studygroup.FieldFacultyName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StudyGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case studygroup.FieldName:
		return m.Name()
	case studygroup.FieldFacultyName:
		return m.FacultyName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StudyGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case studygroup.FieldName:
		return m.OldName(ctx)
	case studygroup.FieldFacultyName:
		return m.OldFacultyName(ctx)
	}
	return nil, fmt.Errorf("unknown StudyGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudyGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case studygroup.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case studygroup.FieldFacultyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFacultyName(v)
		return nil
	}
	return fmt.Errorf("unknown StudyGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StudyGroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StudyGroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudyGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StudyGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StudyGroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StudyGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudyGroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StudyGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StudyGroupMutation) ResetField(name string) error {
	switch name {
	case studygroup.FieldName:
		m.ResetName()
		return nil
	case studygroup.FieldFacultyName:
		m.ResetFacultyName()
		return nil
	}
	return fmt.Errorf("unknown StudyGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StudyGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StudyGroupMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StudyGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StudyGroupMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StudyGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StudyGroupMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StudyGroupMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown StudyGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StudyGroupMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown StudyGroup edge %s", name)
}

// TeacherMutation represents an operation that mutates the Teacher nodes in the graph.
type TeacherMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Teacher, error)
	predicates    []predicate.Teacher
}

var _ ent.Mutation = (*TeacherMutation)(nil)

// teacherOption allows management of the mutation configuration using functional options.
type teacherOption func(*TeacherMutation)

// newTeacherMutation creates new mutation for the Teacher entity.
func newTeacherMutation(c config, op Op, opts ...teacherOption) *TeacherMutation {
	m := &TeacherMutation{
		config:        c,
		op:            op,
		typ:           TypeTeacher,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeacherID sets the ID field of the mutation.
func withTeacherID(id string) teacherOption {
	return func(m *TeacherMutation) {
		var (
			err   error
			once  sync.Once
			value *Teacher
		)
		m.oldValue = func(ctx context.Context) (*Teacher, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Teacher.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeacher sets the old Teacher of the mutation.
func withTeacher(node *Teacher) teacherOption {
	return func(m *TeacherMutation) {
		m.oldValue = func(context.Context) (*Teacher, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeacherMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeacherMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Teacher entities.
func (m *TeacherMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TeacherMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TeacherMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Teacher.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TeacherMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TeacherMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Teacher entity.
// If the Teacher object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeacherMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TeacherMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the TeacherMutation builder.
func (m *TeacherMutation) Where(ps ...predicate.Teacher) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TeacherMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Teacher).
func (m *TeacherMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TeacherMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, teacher.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TeacherMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case teacher.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TeacherMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case teacher.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Teacher field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeacherMutation) SetField(name string, value ent.Value) error {
	switch name {
	case teacher.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Teacher field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TeacherMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TeacherMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeacherMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Teacher numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TeacherMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TeacherMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeacherMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Teacher nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TeacherMutation) ResetField(name string) error {
	switch name {
	case teacher.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Teacher field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TeacherMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TeacherMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TeacherMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TeacherMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TeacherMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TeacherMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TeacherMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Teacher unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TeacherMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Teacher edge %s", name)
}

// UserConfigMutation represents an operation that mutates the UserConfig nodes in the graph.
type UserConfigMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	_Email          *string
	_Base           **interface{}
	_ExtendedGroups *[]userconfig.ExtendedGroup
	_ExcludeRules   *[]userconfig.ExcludeRule
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*UserConfig, error)
	predicates      []predicate.UserConfig
}

var _ ent.Mutation = (*UserConfigMutation)(nil)

// userconfigOption allows management of the mutation configuration using functional options.
type userconfigOption func(*UserConfigMutation)

// newUserConfigMutation creates new mutation for the UserConfig entity.
func newUserConfigMutation(c config, op Op, opts ...userconfigOption) *UserConfigMutation {
	m := &UserConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeUserConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserConfigID sets the ID field of the mutation.
func withUserConfigID(id uuid.UUID) userconfigOption {
	return func(m *UserConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *UserConfig
		)
		m.oldValue = func(ctx context.Context) (*UserConfig, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserConfig sets the old UserConfig of the mutation.
func withUserConfig(node *UserConfig) userconfigOption {
	return func(m *UserConfigMutation) {
		m.oldValue = func(context.Context) (*UserConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserConfig entities.
func (m *UserConfigMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserConfigMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserConfigMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserConfig.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "Email" field.
func (m *UserConfigMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the value of the "Email" field in the mutation.
func (m *UserConfigMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "Email" field's value of the UserConfig entity.
// If the UserConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserConfigMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "Email" field.
func (m *UserConfigMutation) ResetEmail() {
	m._Email = nil
}

// SetBase sets the "Base" field.
func (m *UserConfigMutation) SetBase(i *interface{}) {
	m._Base = &i
}

// Base returns the value of the "Base" field in the mutation.
func (m *UserConfigMutation) Base() (r *interface{}, exists bool) {
	v := m._Base
	if v == nil {
		return
	}
	return *v, true
}

// OldBase returns the old "Base" field's value of the UserConfig entity.
// If the UserConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserConfigMutation) OldBase(ctx context.Context) (v *interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBase is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBase requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBase: %w", err)
	}
	return oldValue.Base, nil
}

// ResetBase resets all changes to the "Base" field.
func (m *UserConfigMutation) ResetBase() {
	m._Base = nil
}

// SetExtendedGroups sets the "ExtendedGroups" field.
func (m *UserConfigMutation) SetExtendedGroups(ug []userconfig.ExtendedGroup) {
	m._ExtendedGroups = &ug
}

// ExtendedGroups returns the value of the "ExtendedGroups" field in the mutation.
func (m *UserConfigMutation) ExtendedGroups() (r []userconfig.ExtendedGroup, exists bool) {
	v := m._ExtendedGroups
	if v == nil {
		return
	}
	return *v, true
}

// OldExtendedGroups returns the old "ExtendedGroups" field's value of the UserConfig entity.
// If the UserConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserConfigMutation) OldExtendedGroups(ctx context.Context) (v []userconfig.ExtendedGroup, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtendedGroups is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtendedGroups requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtendedGroups: %w", err)
	}
	return oldValue.ExtendedGroups, nil
}

// ResetExtendedGroups resets all changes to the "ExtendedGroups" field.
func (m *UserConfigMutation) ResetExtendedGroups() {
	m._ExtendedGroups = nil
}

// SetExcludeRules sets the "ExcludeRules" field.
func (m *UserConfigMutation) SetExcludeRules(ur []userconfig.ExcludeRule) {
	m._ExcludeRules = &ur
}

// ExcludeRules returns the value of the "ExcludeRules" field in the mutation.
func (m *UserConfigMutation) ExcludeRules() (r []userconfig.ExcludeRule, exists bool) {
	v := m._ExcludeRules
	if v == nil {
		return
	}
	return *v, true
}

// OldExcludeRules returns the old "ExcludeRules" field's value of the UserConfig entity.
// If the UserConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserConfigMutation) OldExcludeRules(ctx context.Context) (v []userconfig.ExcludeRule, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExcludeRules is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExcludeRules requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExcludeRules: %w", err)
	}
	return oldValue.ExcludeRules, nil
}

// ResetExcludeRules resets all changes to the "ExcludeRules" field.
func (m *UserConfigMutation) ResetExcludeRules() {
	m._ExcludeRules = nil
}

// Where appends a list predicates to the UserConfigMutation builder.
func (m *UserConfigMutation) Where(ps ...predicate.UserConfig) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserConfigMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserConfig).
func (m *UserConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserConfigMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._Email != nil {
		fields = append(fields, entuserconfig.FieldEmail)
	}
	if m._Base != nil {
		fields = append(fields, entuserconfig.FieldBase)
	}
	if m._ExtendedGroups != nil {
		fields = append(fields, entuserconfig.FieldExtendedGroups)
	}
	if m._ExcludeRules != nil {
		fields = append(fields, entuserconfig.FieldExcludeRules)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entuserconfig.FieldEmail:
		return m.Email()
	case entuserconfig.FieldBase:
		return m.Base()
	case entuserconfig.FieldExtendedGroups:
		return m.ExtendedGroups()
	case entuserconfig.FieldExcludeRules:
		return m.ExcludeRules()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entuserconfig.FieldEmail:
		return m.OldEmail(ctx)
	case entuserconfig.FieldBase:
		return m.OldBase(ctx)
	case entuserconfig.FieldExtendedGroups:
		return m.OldExtendedGroups(ctx)
	case entuserconfig.FieldExcludeRules:
		return m.OldExcludeRules(ctx)
	}
	return nil, fmt.Errorf("unknown UserConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entuserconfig.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case entuserconfig.FieldBase:
		v, ok := value.(*interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBase(v)
		return nil
	case entuserconfig.FieldExtendedGroups:
		v, ok := value.([]userconfig.ExtendedGroup)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtendedGroups(v)
		return nil
	case entuserconfig.FieldExcludeRules:
		v, ok := value.([]userconfig.ExcludeRule)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExcludeRules(v)
		return nil
	}
	return fmt.Errorf("unknown UserConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserConfigMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserConfigMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserConfigMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserConfigMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserConfigMutation) ResetField(name string) error {
	switch name {
	case entuserconfig.FieldEmail:
		m.ResetEmail()
		return nil
	case entuserconfig.FieldBase:
		m.ResetBase()
		return nil
	case entuserconfig.FieldExtendedGroups:
		m.ResetExtendedGroups()
		return nil
	case entuserconfig.FieldExcludeRules:
		m.ResetExcludeRules()
		return nil
	}
	return fmt.Errorf("unknown UserConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserConfigMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserConfigMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserConfigMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserConfigMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserConfig edge %s", name)
}
