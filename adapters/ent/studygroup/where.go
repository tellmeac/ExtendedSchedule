// Code generated by ent, DO NOT EDIT.

package studygroup

import (
	"tellmeac/extended-schedule/adapters/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// FacultyName applies equality check predicate on the "facultyName" field. It's identical to FacultyNameEQ.
func FacultyName(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacultyName), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.StudyGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.StudyGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// FacultyNameEQ applies the EQ predicate on the "facultyName" field.
func FacultyNameEQ(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacultyName), v))
	})
}

// FacultyNameNEQ applies the NEQ predicate on the "facultyName" field.
func FacultyNameNEQ(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFacultyName), v))
	})
}

// FacultyNameIn applies the In predicate on the "facultyName" field.
func FacultyNameIn(vs ...string) predicate.StudyGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFacultyName), v...))
	})
}

// FacultyNameNotIn applies the NotIn predicate on the "facultyName" field.
func FacultyNameNotIn(vs ...string) predicate.StudyGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFacultyName), v...))
	})
}

// FacultyNameGT applies the GT predicate on the "facultyName" field.
func FacultyNameGT(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFacultyName), v))
	})
}

// FacultyNameGTE applies the GTE predicate on the "facultyName" field.
func FacultyNameGTE(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFacultyName), v))
	})
}

// FacultyNameLT applies the LT predicate on the "facultyName" field.
func FacultyNameLT(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFacultyName), v))
	})
}

// FacultyNameLTE applies the LTE predicate on the "facultyName" field.
func FacultyNameLTE(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFacultyName), v))
	})
}

// FacultyNameContains applies the Contains predicate on the "facultyName" field.
func FacultyNameContains(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFacultyName), v))
	})
}

// FacultyNameHasPrefix applies the HasPrefix predicate on the "facultyName" field.
func FacultyNameHasPrefix(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFacultyName), v))
	})
}

// FacultyNameHasSuffix applies the HasSuffix predicate on the "facultyName" field.
func FacultyNameHasSuffix(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFacultyName), v))
	})
}

// FacultyNameEqualFold applies the EqualFold predicate on the "facultyName" field.
func FacultyNameEqualFold(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFacultyName), v))
	})
}

// FacultyNameContainsFold applies the ContainsFold predicate on the "facultyName" field.
func FacultyNameContainsFold(v string) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFacultyName), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StudyGroup) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StudyGroup) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StudyGroup) predicate.StudyGroup {
	return predicate.StudyGroup(func(s *sql.Selector) {
		p(s.Not())
	})
}
