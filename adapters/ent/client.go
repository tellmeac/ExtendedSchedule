// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"tellmeac/extended-schedule/adapters/ent/migrate"

	"tellmeac/extended-schedule/adapters/ent/studygroup"
	"tellmeac/extended-schedule/adapters/ent/teacher"
	entuserconfig "tellmeac/extended-schedule/adapters/ent/userconfig"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// StudyGroup is the client for interacting with the StudyGroup builders.
	StudyGroup *StudyGroupClient
	// Teacher is the client for interacting with the Teacher builders.
	Teacher *TeacherClient
	// UserConfig is the client for interacting with the UserConfig builders.
	UserConfig *UserConfigClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.StudyGroup = NewStudyGroupClient(c.config)
	c.Teacher = NewTeacherClient(c.config)
	c.UserConfig = NewUserConfigClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		StudyGroup: NewStudyGroupClient(cfg),
		Teacher:    NewTeacherClient(cfg),
		UserConfig: NewUserConfigClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		StudyGroup: NewStudyGroupClient(cfg),
		Teacher:    NewTeacherClient(cfg),
		UserConfig: NewUserConfigClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		StudyGroup.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.StudyGroup.Use(hooks...)
	c.Teacher.Use(hooks...)
	c.UserConfig.Use(hooks...)
}

// StudyGroupClient is a client for the StudyGroup schema.
type StudyGroupClient struct {
	config
}

// NewStudyGroupClient returns a client for the StudyGroup from the given config.
func NewStudyGroupClient(c config) *StudyGroupClient {
	return &StudyGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `studygroup.Hooks(f(g(h())))`.
func (c *StudyGroupClient) Use(hooks ...Hook) {
	c.hooks.StudyGroup = append(c.hooks.StudyGroup, hooks...)
}

// Create returns a builder for creating a StudyGroup entity.
func (c *StudyGroupClient) Create() *StudyGroupCreate {
	mutation := newStudyGroupMutation(c.config, OpCreate)
	return &StudyGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StudyGroup entities.
func (c *StudyGroupClient) CreateBulk(builders ...*StudyGroupCreate) *StudyGroupCreateBulk {
	return &StudyGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StudyGroup.
func (c *StudyGroupClient) Update() *StudyGroupUpdate {
	mutation := newStudyGroupMutation(c.config, OpUpdate)
	return &StudyGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StudyGroupClient) UpdateOne(sg *StudyGroup) *StudyGroupUpdateOne {
	mutation := newStudyGroupMutation(c.config, OpUpdateOne, withStudyGroup(sg))
	return &StudyGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StudyGroupClient) UpdateOneID(id string) *StudyGroupUpdateOne {
	mutation := newStudyGroupMutation(c.config, OpUpdateOne, withStudyGroupID(id))
	return &StudyGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StudyGroup.
func (c *StudyGroupClient) Delete() *StudyGroupDelete {
	mutation := newStudyGroupMutation(c.config, OpDelete)
	return &StudyGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StudyGroupClient) DeleteOne(sg *StudyGroup) *StudyGroupDeleteOne {
	return c.DeleteOneID(sg.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *StudyGroupClient) DeleteOneID(id string) *StudyGroupDeleteOne {
	builder := c.Delete().Where(studygroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StudyGroupDeleteOne{builder}
}

// Query returns a query builder for StudyGroup.
func (c *StudyGroupClient) Query() *StudyGroupQuery {
	return &StudyGroupQuery{
		config: c.config,
	}
}

// Get returns a StudyGroup entity by its id.
func (c *StudyGroupClient) Get(ctx context.Context, id string) (*StudyGroup, error) {
	return c.Query().Where(studygroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StudyGroupClient) GetX(ctx context.Context, id string) *StudyGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StudyGroupClient) Hooks() []Hook {
	return c.hooks.StudyGroup
}

// TeacherClient is a client for the Teacher schema.
type TeacherClient struct {
	config
}

// NewTeacherClient returns a client for the Teacher from the given config.
func NewTeacherClient(c config) *TeacherClient {
	return &TeacherClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teacher.Hooks(f(g(h())))`.
func (c *TeacherClient) Use(hooks ...Hook) {
	c.hooks.Teacher = append(c.hooks.Teacher, hooks...)
}

// Create returns a builder for creating a Teacher entity.
func (c *TeacherClient) Create() *TeacherCreate {
	mutation := newTeacherMutation(c.config, OpCreate)
	return &TeacherCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Teacher entities.
func (c *TeacherClient) CreateBulk(builders ...*TeacherCreate) *TeacherCreateBulk {
	return &TeacherCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Teacher.
func (c *TeacherClient) Update() *TeacherUpdate {
	mutation := newTeacherMutation(c.config, OpUpdate)
	return &TeacherUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeacherClient) UpdateOne(t *Teacher) *TeacherUpdateOne {
	mutation := newTeacherMutation(c.config, OpUpdateOne, withTeacher(t))
	return &TeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeacherClient) UpdateOneID(id string) *TeacherUpdateOne {
	mutation := newTeacherMutation(c.config, OpUpdateOne, withTeacherID(id))
	return &TeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Teacher.
func (c *TeacherClient) Delete() *TeacherDelete {
	mutation := newTeacherMutation(c.config, OpDelete)
	return &TeacherDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TeacherClient) DeleteOne(t *Teacher) *TeacherDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TeacherClient) DeleteOneID(id string) *TeacherDeleteOne {
	builder := c.Delete().Where(teacher.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeacherDeleteOne{builder}
}

// Query returns a query builder for Teacher.
func (c *TeacherClient) Query() *TeacherQuery {
	return &TeacherQuery{
		config: c.config,
	}
}

// Get returns a Teacher entity by its id.
func (c *TeacherClient) Get(ctx context.Context, id string) (*Teacher, error) {
	return c.Query().Where(teacher.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeacherClient) GetX(ctx context.Context, id string) *Teacher {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TeacherClient) Hooks() []Hook {
	return c.hooks.Teacher
}

// UserConfigClient is a client for the UserConfig schema.
type UserConfigClient struct {
	config
}

// NewUserConfigClient returns a client for the UserConfig from the given config.
func NewUserConfigClient(c config) *UserConfigClient {
	return &UserConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entuserconfig.Hooks(f(g(h())))`.
func (c *UserConfigClient) Use(hooks ...Hook) {
	c.hooks.UserConfig = append(c.hooks.UserConfig, hooks...)
}

// Create returns a builder for creating a UserConfig entity.
func (c *UserConfigClient) Create() *UserConfigCreate {
	mutation := newUserConfigMutation(c.config, OpCreate)
	return &UserConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserConfig entities.
func (c *UserConfigClient) CreateBulk(builders ...*UserConfigCreate) *UserConfigCreateBulk {
	return &UserConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserConfig.
func (c *UserConfigClient) Update() *UserConfigUpdate {
	mutation := newUserConfigMutation(c.config, OpUpdate)
	return &UserConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserConfigClient) UpdateOne(uc *UserConfig) *UserConfigUpdateOne {
	mutation := newUserConfigMutation(c.config, OpUpdateOne, withUserConfig(uc))
	return &UserConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserConfigClient) UpdateOneID(id uuid.UUID) *UserConfigUpdateOne {
	mutation := newUserConfigMutation(c.config, OpUpdateOne, withUserConfigID(id))
	return &UserConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserConfig.
func (c *UserConfigClient) Delete() *UserConfigDelete {
	mutation := newUserConfigMutation(c.config, OpDelete)
	return &UserConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserConfigClient) DeleteOne(uc *UserConfig) *UserConfigDeleteOne {
	return c.DeleteOneID(uc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserConfigClient) DeleteOneID(id uuid.UUID) *UserConfigDeleteOne {
	builder := c.Delete().Where(entuserconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserConfigDeleteOne{builder}
}

// Query returns a query builder for UserConfig.
func (c *UserConfigClient) Query() *UserConfigQuery {
	return &UserConfigQuery{
		config: c.config,
	}
}

// Get returns a UserConfig entity by its id.
func (c *UserConfigClient) Get(ctx context.Context, id uuid.UUID) (*UserConfig, error) {
	return c.Query().Where(entuserconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserConfigClient) GetX(ctx context.Context, id uuid.UUID) *UserConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserConfigClient) Hooks() []Hook {
	return c.hooks.UserConfig
}
