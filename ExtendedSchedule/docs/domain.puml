@startuml EntityDiagram

namespace domain {
    namespace entity {
        class Lesson <Entity> {

        }

        class ExcludedLesson <Entity> {
            +ID uuid.UUID
            +LessonRef LessonRef
        }

        class ExtendedLesson <Entity> {
            +ID uuid.UUID
            +Author uuid.UUID
            +IsPrivate bool
            +Context *LessonContext
            +Intervals []LessonInterval
        }

        class GroupInfo <Entity> {
            + ID uuid.UUID
            + Name string
        }
    }

    namespace aggregate {
        class UserConfig <Aggregate> {
            +UserID uuid.UUID
            +JoinedGroups []GroupInfo
            +IgnoredLessons []ExcludedLesson
            +ExtendedLessons []ExtendedLesson
        }

        class DaySchedule <Aggregate> {
            +Date time.Time
            +Sections []Section
        }

        class Section <Aggregate> {
            +Position int
            +Lessons []Lesson
        }

        DaySchedule "M" o-- Section
        Section "M" o-- "1" domain.entity.Lesson
    }

    domain.aggregate.UserConfig "M" o-- "1" domain.entity.ExcludedLesson
    domain.aggregate.UserConfig "M" o-- "1" domain.entity.ExtendedLesson
    domain.aggregate.UserConfig "M" o-- "1" domain.entity.GroupInfo

    namespace repository {
        interface IExcludedRepository {
        }

        interface IExtendedRepository {
        }

        interface IGroupRepository {
        }
    }

    namespace providers {
        interface IBaseScheduleProvider {
        }

        IBaseScheduleProvider --r-> domain.aggregate.DaySchedule
    }

    namespace factory {
        interface IUserConfigFactory {
            +Make(userID uuid.UUID) aggregate.UserConfig
        }

        IUserConfigFactory --> domain.aggregate.UserConfig

        class userConfigFactory implements IUserConfigFactory {
            -schedule IBaseScheduleProvider
            -excluded IExcludedRepository
            -extended IExtendedRepository
            -userConfig IUserConfigRepository
        }

        userConfigFactory "1" o-- "1" domain.repository.IExcludedRepository
        userConfigFactory "1" o-- "1" domain.repository.IExtendedRepository
        userConfigFactory "1" o-- "1" domain.repository.IGroupRepository
        userConfigFactory "1" o-- "1" domain.providers.IBaseScheduleProvider

        interface IUserScheduleFactory {
            +Make(userID uuid.UUID, start, end) []DaySchedule
        }

        IUserScheduleFactory --> domain.aggregate.DaySchedule

        class userscheduleFactory implements IUserScheduleFactory {
            -schedule IBaseScheduleProvider
            -excluded IExcludedRepository
            -extended IExtendedRepository
            -userConfig IUserConfigRepository
        }

        userscheduleFactory "1" o-- "1" domain.repository.IExcludedRepository
        userscheduleFactory "1" o-- "1" domain.repository.IExtendedRepository
        userscheduleFactory "1" o-- "1" domain.repository.IGroupRepository
        userscheduleFactory "1" o-- "1" domain.providers.IBaseScheduleProvider
    }
}

@enduml