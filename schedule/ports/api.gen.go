// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package ports

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/gin-gonic/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Cell defines model for Cell.
type Cell struct {
	Lessons *[]Lesson `json:"lessons"`

	// Position
	Pos float32 `json:"pos"`
}

// Day defines model for Day.
type Day struct {
	Cells []Cell             `json:"cells"`
	Date  openapi_types.Date `json:"date"`
}

// Faculty defines model for Faculty.
type Faculty struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// Lesson defines model for Lesson.
type Lesson struct {
	// Study group codes
	Groups  []string    `json:"groups"`
	Id      string      `json:"id"`
	Kind    string      `json:"kind"`
	Name    string      `json:"name"`
	Teacher interface{} `json:"teacher"`
}

// Schedule defines model for Schedule.
type Schedule struct {
	// ascending ordered schedule days
	Days      []Day              `json:"days"`
	EndDate   openapi_types.Date `json:"endDate"`
	StartDate openapi_types.Date `json:"startDate"`
}

// Teacher defines model for Teacher.
type Teacher struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get faculty list
	// (GET /faculties)
	GetFaculties(c *gin.Context)
	// Get group's lesson list
	// (GET /lessons/byGroup/{groupId})
	GetLessonsByGroupGroupId(c *gin.Context, groupId string)
	// Get group's schedule
	// (GET /schedule/byGroup/{groupId})
	GetScheduleByGroupGroupId(c *gin.Context, groupId string)
	// Get personal schedule
	// (GET /user/{userId}/schedule)
	GetUserUserIdSchedule(c *gin.Context, userId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetFaculties operation middleware
func (siw *ServerInterfaceWrapper) GetFaculties(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetFaculties(c)
}

// GetLessonsByGroupGroupId operation middleware
func (siw *ServerInterfaceWrapper) GetLessonsByGroupGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter groupId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetLessonsByGroupGroupId(c, groupId)
}

// GetScheduleByGroupGroupId operation middleware
func (siw *ServerInterfaceWrapper) GetScheduleByGroupGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter groupId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetScheduleByGroupGroupId(c, groupId)
}

// GetUserUserIdSchedule operation middleware
func (siw *ServerInterfaceWrapper) GetUserUserIdSchedule(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter userId: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUserUserIdSchedule(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/faculties", wrapper.GetFaculties)

	router.GET(options.BaseURL+"/lessons/byGroup/:groupId", wrapper.GetLessonsByGroupGroupId)

	router.GET(options.BaseURL+"/schedule/byGroup/:groupId", wrapper.GetScheduleByGroupGroupId)

	router.GET(options.BaseURL+"/user/:userId/schedule", wrapper.GetUserUserIdSchedule)

	return router
}
