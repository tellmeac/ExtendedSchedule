// Package tsu provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package tsu

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Audience defines model for Audience.
type Audience struct {
	ID   *string `json:"id"`
	Name string  `json:"name"`
}

// DaySchedule defines model for DaySchedule.
type DaySchedule struct {
	Date    openapi_types.Date `json:"date"`
	Lessons []Lesson           `json:"lessons"`
}

// Faculty defines model for Faculty.
type Faculty struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// Lesson defines model for Lesson.
type Lesson struct {
	Audience   *Audience     `json:"audience,omitempty"`
	Groups     *[]StudyGroup `json:"groups,omitempty"`
	ID         *string       `json:"id,omitempty"`
	Position   int           `json:"lessonNumber"`
	LessonKind *string       `json:"lessonType,omitempty"`
	Professor  *Teacher      `json:"professor,omitempty"`
	Title      *string       `json:"title,omitempty"`
	Type       string        `json:"type"`
}

// StudyGroup defines model for StudyGroup.
type StudyGroup struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// Teacher defines model for Teacher.
type Teacher struct {
	FullName *string `json:"fullName,omitempty"`
	ID       *string `json:"id,omitempty"`
}

// GetScheduleGroupParams defines parameters for GetScheduleGroup.
type GetScheduleGroupParams struct {
	// groupd identifier
	ID string `form:"id" json:"id"`

	// date to start from
	DateFrom openapi_types.Date `form:"dateFrom" json:"dateFrom"`

	// date to end
	DateTo openapi_types.Date `form:"dateTo" json:"dateTo"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetFaculties request
	GetFaculties(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFacultiesIdGroups request
	GetFacultiesIdGroups(ctx context.Context, iD string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScheduleGroup request
	GetScheduleGroup(ctx context.Context, params *GetScheduleGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetFaculties(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFacultiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFacultiesIdGroups(ctx context.Context, iD string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFacultiesIdGroupsRequest(c.Server, iD)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScheduleGroup(ctx context.Context, params *GetScheduleGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScheduleGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetFacultiesRequest generates requests for GetFaculties
func NewGetFacultiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/faculties")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFacultiesIdGroupsRequest generates requests for GetFacultiesIdGroups
func NewGetFacultiesIdGroupsRequest(server string, iD string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, iD)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/faculties/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScheduleGroupRequest generates requests for GetScheduleGroup
func NewGetScheduleGroupRequest(server string, params *GetScheduleGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedule/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.ID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, params.DateFrom); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, params.DateTo); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetFaculties request
	GetFacultiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFacultiesResponse, error)

	// GetFacultiesIdGroups request
	GetFacultiesIdGroupsWithResponse(ctx context.Context, iD string, reqEditors ...RequestEditorFn) (*GetFacultiesIdGroupsResponse, error)

	// GetScheduleGroup request
	GetScheduleGroupWithResponse(ctx context.Context, params *GetScheduleGroupParams, reqEditors ...RequestEditorFn) (*GetScheduleGroupResponse, error)
}

type GetFacultiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Faculty
}

// Status returns HTTPResponse.Status
func (r GetFacultiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFacultiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFacultiesIdGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StudyGroup
}

// Status returns HTTPResponse.Status
func (r GetFacultiesIdGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFacultiesIdGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScheduleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DaySchedule
}

// Status returns HTTPResponse.Status
func (r GetScheduleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScheduleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetFacultiesWithResponse request returning *GetFacultiesResponse
func (c *ClientWithResponses) GetFacultiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFacultiesResponse, error) {
	rsp, err := c.GetFaculties(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFacultiesResponse(rsp)
}

// GetFacultiesIdGroupsWithResponse request returning *GetFacultiesIdGroupsResponse
func (c *ClientWithResponses) GetFacultiesIdGroupsWithResponse(ctx context.Context, iD string, reqEditors ...RequestEditorFn) (*GetFacultiesIdGroupsResponse, error) {
	rsp, err := c.GetFacultiesIdGroups(ctx, iD, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFacultiesIdGroupsResponse(rsp)
}

// GetScheduleGroupWithResponse request returning *GetScheduleGroupResponse
func (c *ClientWithResponses) GetScheduleGroupWithResponse(ctx context.Context, params *GetScheduleGroupParams, reqEditors ...RequestEditorFn) (*GetScheduleGroupResponse, error) {
	rsp, err := c.GetScheduleGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScheduleGroupResponse(rsp)
}

// ParseGetFacultiesResponse parses an HTTP response from a GetFacultiesWithResponse call
func ParseGetFacultiesResponse(rsp *http.Response) (*GetFacultiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFacultiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Faculty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFacultiesIdGroupsResponse parses an HTTP response from a GetFacultiesIdGroupsWithResponse call
func ParseGetFacultiesIdGroupsResponse(rsp *http.Response) (*GetFacultiesIdGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFacultiesIdGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StudyGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetScheduleGroupResponse parses an HTTP response from a GetScheduleGroupWithResponse call
func ParseGetScheduleGroupResponse(rsp *http.Response) (*GetScheduleGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScheduleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DaySchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
